strict digraph "" {
	node [label="\N"];
	0	[label="0: start"];
	14	[label="0: stop"];
	0 -> 14;
	1	[label="4: enter: consineDistance(p1, p2)"];
	3	[label="5: dotProduct = 0"];
	1 -> 3;
	4	[label="6: lengthSquaredp1 = 0"];
	3 -> 4;
	2	[label="4: exit: consineDistance(p1, p2)"];
	12	[label="20: return 0"];
	12 -> 2;
	13	[label="22: return (1 - (dotProduct / denominator))"];
	13 -> 2;
	5	[label="7: lengthSquaredp2 = 0"];
	4 -> 5;
	6	[label="9: for: (True if range(0, len(p1)) else False)"];
	5 -> 6;
	7	[label="9: i = range(0, len(p1)).shift()"];
	6 -> 7;
	8	[label="14: denominator = (np.sqrt(lengthSquaredp1) * np.sqrt(lengthSquaredp2))"];
	6 -> 8;
	7 -> 6;
	9	[label="16: if: (denominator < dotProduct)"];
	8 -> 9;
	10	[label="17: denominator = dotProduct"];
	9 -> 10;
	11	[label="19: if: ((denominator == 0) and (dotProduct == 0))"];
	9 -> 11;
	10 -> 11;
	11 -> 12;
	11 -> 13;
}
