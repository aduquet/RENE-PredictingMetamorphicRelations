strict digraph "" {
	node [label="\N"];
	0	[label="0: start"];
	14	[label="0: stop"];
	0 -> 14;
	1	[label="1: enter: binarySearchFromTo(elements, key, froom, to)"];
	3	[label="3: low = froom"];
	1 -> 3;
	4	[label="4: high = to"];
	3 -> 4;
	2	[label="1: exit: binarySearchFromTo(elements, key, froom, to)"];
	12	[label="17: return mid"];
	12 -> 2;
	13	[label="18: return (- (low + 1))"];
	13 -> 2;
	5	[label="6: while: (low <= high)"];
	4 -> 5;
	5 -> 13;
	6	[label="7: mid = ((low + high) / 2)"];
	5 -> 6;
	7	[label="8: midVal = elements[mid]"];
	6 -> 7;
	9	[label="11: low = (mid + 1)"];
	9 -> 5;
	11	[label="15: high = (mid - 1)"];
	11 -> 5;
	8	[label="10: if: (midVal < key)"];
	7 -> 8;
	8 -> 9;
	10	[label="14: if: (midVal > key)"];
	8 -> 10;
	10 -> 12;
	10 -> 11;
}
