strict digraph "" {
	node [label="\N"];
	0	[label="0: start"];
	36	[label="0: stop"];
	0 -> 36;
	1	[label="4: enter: safeNorm(v)"];
	3	[label="5: rdwarf = 3.834e-20"];
	1 -> 3;
	4	[label="6: rgiant = 1.304e+19"];
	3 -> 4;
	2	[label="4: exit: safeNorm(v)"];
	35	[label="51: return norm"];
	35 -> 2;
	5	[label="7: s1 = 0"];
	4 -> 5;
	6	[label="8: s2 = 0"];
	5 -> 6;
	7	[label="9: s3 = 0"];
	6 -> 7;
	8	[label="10: x1max = 0"];
	7 -> 8;
	9	[label="11: x3max = 0"];
	8 -> 9;
	10	[label="12: floatn = len(v)"];
	9 -> 10;
	11	[label="13: agiant = (rgiant / floatn)"];
	10 -> 11;
	12	[label="15: for: (True if range(0, len(v)) else False)"];
	11 -> 12;
	13	[label="15: i = range(0, len(v)).shift()"];
	12 -> 13;
	28	[label="39: if: (s1 != 0)"];
	12 -> 28;
	14	[label="16: xabs = abs(v[i])"];
	13 -> 14;
	29	[label="40: norm = (x1max * math.sqrt((s1 + ((s2 / x1max) / x1max))))"];
	28 -> 29;
	30	[label="42: if: (s2 == 0)"];
	28 -> 30;
	20	[label="22: x1max = xabs"];
	20 -> 12;
	21	[label="25: r = (xabs / x1max)"];
	21 -> 12;
	25	[label="31: x3max = xabs"];
	25 -> 12;
	27	[label="34: r = (xabs / x3max)"];
	27 -> 12;
	26	[label="33: if: (xabs != 0)"];
	26 -> 12;
	26 -> 27;
	15	[label="17: if: ((xabs < rdwarf) or (xabs > agiant))"];
	15 -> 12;
	16	[label="18: if: (xabs > rdwarf)"];
	15 -> 16;
	17	[label="19: if: (xabs > x1max)"];
	16 -> 17;
	22	[label="28: if: (xabs > x3max)"];
	16 -> 22;
	14 -> 15;
	17 -> 21;
	18	[label="20: r = (x1max / xabs)"];
	17 -> 18;
	22 -> 26;
	23	[label="29: r = (x3max / xabs)"];
	22 -> 23;
	19	[label="21: s1 = (1 + ((s1 * r) * r))"];
	18 -> 19;
	19 -> 20;
	24	[label="30: s3 = (1 + ((s3 * r) * r))"];
	23 -> 24;
	24 -> 25;
	29 -> 35;
	31	[label="43: norm = (x3max * math.sqrt(s3))"];
	30 -> 31;
	32	[label="46: if: (s2 >= x3max)"];
	30 -> 32;
	31 -> 35;
	33	[label="47: norm = math.sqrt((s2 * (1 + ((x3max / s2) * (x3max * s3)))))"];
	32 -> 33;
	34	[label="49: norm = math.sqrt((x3max * ((s2 / x3max) + (x3max * s3))))"];
	32 -> 34;
	33 -> 35;
	34 -> 35;
}
