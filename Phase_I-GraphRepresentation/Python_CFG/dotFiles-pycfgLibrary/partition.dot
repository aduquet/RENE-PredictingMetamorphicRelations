strict digraph "" {
	node [label="\N"];
	0	[label="0: start"];
	18	[label="0: stop"];
	0 -> 18;
	1	[label="1: enter: partition(work, begin, end, pivot)"];
	3	[label="3: value = work[pivot]"];
	1 -> 3;
	4	[label="4: work[pivot] = work[begin]"];
	3 -> 4;
	2	[label="1: exit: partition(work, begin, end, pivot)"];
	17	[label="26: return i"];
	17 -> 2;
	5	[label="6: i = (begin + 1)"];
	4 -> 5;
	6	[label="7: j = (end - 1)"];
	5 -> 6;
	7	[label="9: while: (i < j)"];
	6 -> 7;
	8	[label="10: while: ((i < j) and (work[j] > value))"];
	7 -> 8;
	14	[label="20: if: ((i >= end) or (work[i] > value))"];
	7 -> 14;
	8 -> 8;
	8 -> 14;
	9	[label="12: while: ((i < j) and (work[i] < value))"];
	8 -> 9;
	15	[label="23: work[begin] = work[i]"];
	14 -> 15;
	13	[label="18: work[(j - 1)] = tmp"];
	13 -> 7;
	10	[label="15: if: (i < j)"];
	10 -> 7;
	11	[label="16: tmp = work[i]"];
	10 -> 11;
	12	[label="17: work[(i + 1)] = work[j]"];
	11 -> 12;
	9 -> 10;
	9 -> 9;
	12 -> 13;
	16	[label="24: work[i] = value"];
	15 -> 16;
	16 -> 17;
}
