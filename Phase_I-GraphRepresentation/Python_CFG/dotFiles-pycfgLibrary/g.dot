strict digraph "" {
	node [label="\N"];
	0	[label="0: start"];
	19	[label="0: stop"];
	0 -> 19;
	1	[label="4: enter: g(expected, observed)"];
	3	[label="5: sumExpected = 0"];
	1 -> 3;
	4	[label="6: sumObserved = 0"];
	3 -> 4;
	2	[label="4: exit: g(expected, observed)"];
	18	[label="29: return (2 * suma)"];
	18 -> 2;
	5	[label="8: for: (True if range(0, len(observed)) else False)"];
	4 -> 5;
	6	[label="8: i = range(0, len(observed)).shift()"];
	5 -> 6;
	7	[label="12: ratio = 1"];
	5 -> 7;
	6 -> 5;
	8	[label="13: rescale = False"];
	7 -> 8;
	9	[label="15: if: (abs((sumExpected - sumObserved)) > 1e-05)"];
	8 -> 9;
	10	[label="16: ratio = (sumObserved / sumExpected)"];
	9 -> 10;
	12	[label="19: suma = 0"];
	9 -> 12;
	11	[label="17: rescale = True"];
	10 -> 11;
	13	[label="21: for: (True if range(0, len(observed)) else False)"];
	12 -> 13;
	11 -> 12;
	13 -> 18;
	14	[label="21: i = range(0, len(observed)).shift()"];
	13 -> 14;
	15	[label="22: if: rescale"];
	14 -> 15;
	16	[label="23: dev = math.log((observed[i] / (ratio * expected[i])))"];
	16 -> 13;
	17	[label="25: dev = math.log((observed[i] / expected[i]))"];
	17 -> 13;
	15 -> 16;
	15 -> 17;
}
